@model sapra.ViewModels.MapLayerListViewModel
@{
	ViewData["Title"] = "Mapa de ArcGIS";
}
<div id="mapDiv" class="map">
</div>
<div id="areaDiv" class="container">
    <br><br>
    <h4>Consultar información sobre un Area</h4><br>
    <div class="form-group">

        <div class="w-100 h-100">
            <h6>Campos ArcGIS sobre este area:</h6><br>
            <div id="values" class="w-100 h-100">

            </div>
            <br>
            <h6>Seleccione el permiso que desea consultar para el informe:</h6><br>
            <select class="form-control border-dark mw-450 fieldClass">
			    <option value="">Seleccionar</option>
			    <option value="0">Vivienda</option>
			    <option value="1">Ejemplo</option>
		    </select>
            <br>
        </div>

        <button type="button" onclick="ResetToMap();" class="btn btn-primary bg-color1 rounded-0">
		    <i class="btn-has-text fa fa-step-backward"></i>
		    Regresar al mapa
	    </button>

        <button type="button" onclick="GeneratePDF();" class="btn btn-primary bg-color1 rounded-0">
		    <i class="btn-has-text fa fa-file-pdf-o"></i>
		    Generar informe sobre Permiso
	    </button>
    </div>
</div>
<script>

    var queryLayer;
    var fieldsName = [];
    var fieldsAlias = [];
    var fieldsType = [];
    var layersURL = [];
    var layersName = [];

    @foreach (MapLayerField field in Model.Layers[0].MapLayerFields) 
    {
    @:fieldsName.push(decodeHtml("@field.Name"));
    @:fieldsAlias.push("@field.Alias");
    @:fieldsType.push("@field.Type");
    }

    displayLayout();
    $('#areaDiv').hide();

            
    function GeneratePDF()
    {
        /*$.ajax({
            type: "post",
            url: "Map/QueryReport",
            data: {"FID": fid},
            success: function (response) {
	            $("#currentTab").html(response);
            },
		});*/
    }

    function ResetToMap()
    {
        $('#areaDiv').hide();
        $('#mapDiv').show();
    }

    function ExploreArea(FID)
    {
        $('#areaDiv').show();
        $('#mapDiv').hide();

        require([
            "esri/Map",
            "esri/views/MapView",
            "esri/layers/Layer",
            "esri/layers/FeatureLayer",
            "esri/widgets/Search",
            "esri/widgets/LayerList",
            "esri/tasks/support/Query",
        ],
            function (Map, MapView, Layer, FeatureLayer, Search, LayerList, Query) {

                
                $('#values').html("Realizando consulta...");

                var tuple = "";
                var query = queryLayer.createQuery();

                query.where = "FID = " + FID;
                query.outFields = fieldsName;

                queryLayer.queryFeatures(query)
                .then(function(response){
                    
                    var fields = response.fields;
                    var values = response.features[0].attributes;

                    for (var i = 0; i < fields.length; i++) {
                        if (values[fields[i].alias] != undefined && values[fields[i].alias] != 0) {
                            tuple += "<h6><b>" + fieldsAlias[i] + ":</b> " + values[fields[i].alias] + "</h6>";
                        }
                        else
                        {
                            tuple += "<h6><b>" + fieldsAlias[i] + ":</b> Sin definir </h6>";
                        }
                    }

                    $('#values').html(tuple);

                });

        });

    }

    require([
        "esri/Map",
        "esri/views/MapView",
        "esri/layers/Layer",
        "esri/layers/FeatureLayer",
        "esri/widgets/Search",
        "esri/widgets/LayerList",
        "esri/tasks/support/Query",
        ],
        function (Map, MapView, Layer, FeatureLayer, Search, LayerList, Query)
        {

            function dialogFunction(feature)
            {
                var div = document.createElement("div");
                for (i = 0; i < fieldsName.length; i++)
                {
                    if (feature.graphic.attributes[fieldsName[i]] != undefined && feature.graphic.attributes[fieldsName[i]] != 0)
                    {
                        var data = feature.graphic.attributes[fieldsName[i]];
                        if(fieldsType[i] == @MapLayerField.NumberField)
                        {
                            data = data.toFixed(0);
                        }
                        else if (fieldsType[i] == @MapLayerField.DoubleField)
                        {
                            if (Math.round(feature.graphic.attributes[fieldsName[i]]) !== feature.graphic.attributes[fieldsName[i]])
                            {
                                data = data.toFixed(2);
                            }
                        }
						div.innerHTML += "<b>"+fieldsAlias[i]+":</b> " + data + "<br>";
					} 
                }
                ;

                div.innerHTML += "<br>" + 
                "<button onclick='ExploreArea(" + feature.graphic.attributes["FID"] + ")' type='submit' class='btn btn-primary bg-color1 rounded-0'><i class='btn-has-text fa fa-search'></i>" +
                    "Consulta avanzada" + "<br>" + 
                "</button>";
                return div;
            };
        
        var map = new Map({
            basemap: "osm"
        });

        @foreach (MapLayer mapLayer in Model.Layers) 
        {
            @:layersURL.push("@Model.BaseUrl@mapLayer.URL");
            @:layersName.push(decodeHtml("@mapLayer.Name"));
        }

        layersURL.reverse();
        layersName.reverse();

		// for each layer of the system, add layer
		// add to the controls to switch beetwen layers
        for (currentLayer = 0; currentLayer < layersURL.length; currentLayer++) {
            var layer = new FeatureLayer({
                url: layersURL[currentLayer],
                outFields: ["*"]
            });

            if (layersName[currentLayer] == "@sapra.Controllers.SystemController.LoadSettings().BaseLayer")
            {
                var popupTemplate = {
                    // autocasts as new PopupTemplate()
                    title: "Información de esta ubicación",
                    outFields: ["*"],
                    content: dialogFunction,
                    fieldInfos:
                        [
                        @foreach (MapLayerField field in Model.Layers[0].MapLayerFields)
					    { 
                            @:{
                            @:  fieldName: decodeHtml("@field.Name")
                            @if(field.Type == MapLayerField.NumberField){
                            @:  ,format: { digitSeparator: true, places: 2 }
                            } 
                            @:},
                        }
                    ]
                };

                layer.popupTemplate = popupTemplate;
            }
            
            queryLayer = layer;
            map.add(layer);
        }

        // Views 
        var view = new MapView({
            container: "mapDiv",
            map: map,
            center: [-84.217, 10.012],
            zoom: 14,
            highlightOptions: {
                color: "orange",
                haloOpacity: 0.9,
                fillOpacity: 0.2
            },
            popup: { 
                autoOpenEnabled: true 
            } 
        });

        // Seach Widget
        var search = new Search({
            view: view
        });

        // Layers Widget
        var layersWidget = new LayerList({
          view: view
        });

        // Coords Widget
        var coordsWidget = document.createElement("div");
        coordsWidget.id = "coordsWidget";
        coordsWidget.className = "esri-widget esri-component";
        coordsWidget.style.padding = "7px 15px 5px";

        function showCoordinates(pt) {
            var coords = "Latitud/Longitud " + pt.latitude.toFixed(3) + " " + pt.longitude.toFixed(3) + 
                " | Escala 1:" + Math.round(view.scale * 1) / 1 +
                " | Zoom " + view.zoom;
            coordsWidget.innerHTML = coords;
        }

        view.watch(["stationary"], function() {
            showCoordinates(view.center);
        });

        view.on(["pointer-down","pointer-move"], function(evt) {
            showCoordinates(view.toMap({ x: evt.x, y: evt.y }));
        });

        // Add to Map Result
        view.ui.add([
            {
                component: coordsWidget,
                position: "bottom-right",
            },
            {
                component: layersWidget,
                position: "top-left",
                index: 0
            },
            {
                component: search,
                position: "top-right",
            }
        ]);

        view.when(function () {
            setTimeout(function(){
                $('.esri-search__input').attr("placeholder", "Buscar lugares o direcciones...");
            }, 750);

        }); 

    });
</script>
<style>
    .map {
	    padding: 0;
	    margin: 0;
	    width: 100% !important;
	    height: 100% !important;
    }

    .full {
	    height: calc(100% - 56px);
	    margin: 0 !important;
    }

	.esri-view .esri-view-surface--inset-outline:focus::after {
		outline: none !important;
	}

	.esri-layer-list__item .esri-layer-list__item-container {
		border: none !important;
		outline: none !important;
	}
</style>